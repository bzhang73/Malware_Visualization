import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from numpy import dtype, float32
from pickletools import float8
import cv2 as cv

def get_class(data):
    process = ["new_pid", "nt_create_user_process", "nt_terminate_process"]
    file = ["nt_create_file", "nt_read_file", "nt_write_file", "nt_delete_file"]
    registry = ["nt_create_key", "nt_create_key_transacted", "nt_open_key", "nt_open_key_ex", "nt_open_key_transacted", "nt_open_key_transacted_ex", "nt_delete_key", "nt_query_key"]
    virtual = ["nt_read_virtual_memory", "nt_write_virtual_memory"]
    ipc = ["nt_create_port", "nt_connect_port", "nt_listen_port", "nt_accept_connect_port", "nt_complete_connect_port", "nt_request_port", "nt_request_wait_reply_port", "nt_reply_port", "nt_reply_wait_reply_port", "nt_reply_wait_receive_port", "nt_impersonate_client_of_port"]
    memSection = ["nt_create_section", "nt_open_section", "nt_map_view_of_section"]

    if(data in process):
      return "process"
    elif(data in file):
      return "file"
    elif(data in registry):
      return "registry"
    elif(data in virtual):
      return "virtual-memory"
    elif(data in ipc):
      return "ipc"
    elif(data in memSection):
      return "memory-section"

def get_data(): 
    # Read data path should be ./data/data.csv
    csv_data = pd.read_csv("./data/data.csv", usecols=["instr", "call_name", "pid", "pname"])
    
    call_category = []
    for d in csv_data["call_name"]:
        call_category.append(get_class(d))
    '''
    y = pd.Series(call_category)
    y=y.values.reshape(-1,1)
    
    print(y)
    '''
    instr = csv_data["instr"].values.tolist()
    call_name = csv_data["call_name"].values.tolist()
    pid = csv_data["pid"].values.tolist()
    pname = csv_data["pname"].values.tolist()
    
    data = []
    data.append(instr)
    data.append(call_name)
    data.append(pid)
    data.append(pname)
    data.append(call_category)
    
    return data
def draw_api_graph(data):
    d = {}
    for key in data:
        d[key] = d.get(key, 0) + 1
    # print(d)
    
    x = list(d.keys())
    y = list(d.values())
    index = np.arange(len(x))
    # x_range = range(index)
    color = []
    for d in x:
        color.append(color_dist[d])
    
    #print(x)
    #print(y)
    
    #print(color)
    plt.title("API Call Counts")
    plt.bar(index, y, 0.35, color=color)
    x = np.array(x)
    plt.xticks([0,1,2,3,4,5],x)
    plt.savefig("api_img.png")

def draw_image(c,malwareFlag):
    img = np.zeros((94*12,1215*2,3))
    
    for i in range(94):
        for j in range(1215):
            for x in range(10):
                img[i*12+x,j*2] = np.array(c[i*1213+j])
                img[i*12+x,j*2+1] = np.array(c[i*1213+j])
    
    cv.imwrite("test_{}.png".format(malwareFlag),img)


def draw_graph(malwareFlag):
    x = []
    y = []
    colors = []
    for j in range(no_of_lines):
        my_s = slice(j * no_of_call_per_line, min(data_len, j * no_of_call_per_line + (no_of_call_per_line - 1)))
        new_data = data[my_s]
        # print(new_data.shape)
        for i in range(len(new_data)):
            instr = new_data[i][0]
            call_name = new_data[i][1]
            pid = new_data[i][2]
            pname = new_data[i][3]
            call_category = new_data[i][4]
            
            # print(instr,pname,call_category)
            
            color = ''
            #To recongiize malware
            if int(instr) < minTemp or int(instr) > maxTemp:
                color = (255,255,255)
            # if(d.pname!="bbc03a5638e801" && malwareFlag=="malware")
            elif pname != "bbc03a5638e801" and malwareFlag == "malware":
                color = (255,255,255)
            else:
                if call_category not in active_api:
                    color = (255,255,255)
                else:
                    color = color_dist_rgb[call_category]
            x.append(i)
            y.append(no_of_lines - j)
            colors.append(color)


    #print(len(x),len(y),len(colors))
    draw_image(colors,malwareFlag)



color_dist = {
      "process" : "#DF4949",
      'file' : "#E27A3F",
      'registry' :  "#EFC94C",
       'memory-section' : "#9B59B6",
      'virtual-memory' :  "#F495A3",
      'ipc':'#45B29D'
}


color_dist_rgb = {
      "process" : (73,73,223),
      'file' : (63,122,226),
      'registry' :  (76,201,239),
       'memory-section' : (182,89,155),
      'virtual-memory' :  (163,149,244),
      'ipc': (157,178,69)
}   
active_api = ["process", "file", "registry", "memory-section", "virtual-memory", "ipc"];

# The size of pic
no_of_call_per_line = 1215

data = get_data()
data_len = len(data[0])

no_of_lines = data_len // no_of_call_per_line 


maxTime = max(data[0])

minTime = min(data[0])
minTemp = minTime;
maxTemp = maxTime;
print((maxTime, minTime))
data_t = data
data = np.array(data).T

call_category = data_t[4]
# print(call_category)


draw_api_graph(call_category)
draw_graph("full")
draw_graph("malware")

